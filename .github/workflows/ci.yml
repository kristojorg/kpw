# This workflow will
#   - PRs and pushes to master/beta
#     - Install deps
#     - Lint
#     - Typecheck
#     - Test
#   - Only on pushes to master/beta
#     - Create a new git tag
#     - Automatically create a new release with content
name: CI

on:
  # will run whenever commits are pushed to master or beta
  # eg. when merging a PR into beta
  push:
    branches: [master, beta]
  # will run on all PRs that are opened or updated (synchronized)
  pull_request:
    types: [opened, synchronize]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 13.x
      uses: actions/setup-node@v1
      with:
        node-version: 13.x
    - name: Cache and install node modules
      uses: bahmutov/npm-install@v1
    - name: Lint
      run: npm run lint
      
  typecheck:
    name: Typecheck
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 13.x
      uses: actions/setup-node@v1
      with:
        node-version: 13.x
    - name: Cache and install node modules
      uses: bahmutov/npm-install@v1
    - name: Typecheck
      run: tsc --noEmit
      
  test:
    name: Test
    runs-on: ubuntu-latest
    env:
      CI: true
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 13.x
      uses: actions/setup-node@v1
      with:
        node-version: 13.x
    - name: Cache and install node modules
      uses: bahmutov/npm-install@v1
    - name: Test
      run: npm run test

  release:
    name: Tag & Release
    # only publish if this is a push to beta or master.
    # we don't publish PRs to Docker Hub currently
    if: github.event == 'push'
    # if any of the above fail, do not continue
    needs: [test, typecheck, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        # the tag will match the package.json version (eg. 1.0.0 or 1.1.0-beta.2)
      - name: Tag
        id: autotagger
        uses: butlerlogic/action-autotag@stable
        with:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          strategy: package
          prefix: v
      - name: Release
        id: create_release
        if: steps.autotagger.outputs.tagname != ''
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.autotagger.outputs.tagname }}
          release_name: Version ${{ steps.autotagger.outputs.version }}
          body: ${{ steps.autotagger.outputs.tagmessage }}
          draft: false
          prerelease: github.ref == 'beta'
